/*
 * Keymap stellar, loosly based on:
 *   https://github.com/urob/zmk-config/blob/main/config/base.keymap
 */


#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>

#ifdef CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #include <dt-bindings/zmk/outputs.h>
    #define _BT_SEL_KEYS_                                                      \
        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#ifdef CONFIG_RGB_UNDERGLOW
    #include <dt-bindings/zmk/rgb.h>
    #define UG_CLR_PINK &rgb_ug RGB_COLOR_HSB(328, 100, 54)
    #define UG_CLR_RED  &rgb_ug RGB_COLOR_HSB(348, 83, 47)
    #define UG_CLR_BLUE &rgb_ug RGB_COLOR_HSB(207, 44, 49)
    #define UG_CLR_PRPL &rgb_ug RGB_COLOR_HSB(260, 49, 86)

    #define _UG_RGB_CLR_KEYS_ &rgb_ug RGB_TOG UG_CLR_PINK UG_CLR_RED UG_CLR_BLUE UG_CLR_PRPL
    #define _UG_RGB_UP_KEYS_ &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_SPI &rgb_ug RGB_EFF
    #define _UG_RGB_DN_KEYS_ &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_SPD &rgb_ug RGB_EFR
#else
    #define _UG_RGB_CLR_KEYS_ &trans &trans &trans &trans &trans
    #define _UG_RGB_UP_KEYS_ &trans &trans &trans &trans &trans
    #define _UG_RGB_DN_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "zmk-helpers/helper.h"

#define DEF  0
#define MED  1
#define NUM  2
#define SYM  3
#define FN   4
#define SYS  5
#define GAM  6
#define GAMP 7

#define XXX &none
#define ___ &trans


/* Global defaults */

#define QUICK_TAP_MS 175

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl {  // Allow sticky mods to chord across sticky layers.
    ignore-modifiers;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};


/* Homerow mods */

// Numeric keys.
#define NUM_L  LN0 LN1 LN2 LN3 LN4
#define NUM_R  RN0 RN1 RN2 RN3 RN4
// Left/right hand keys.
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
// Thumb keys.
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, NUM_R KEYS_R THUMBS)  // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, NUM_L KEYS_L THUMBS)  // Right-hand HRMs.


/* Combos, leader key sequences */

#include "combos.dtsi"  // Must be sourced after HRM-combo hack.


/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
    flavor = "tap-preferred";                                                  \
    tapping-term-ms = <220>;                                                   \
    quick-tap-ms = <220>;                                                      \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT    // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt_end 0    RIGHT   // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LC(HOME) UP      // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LC(END)  DOWN    // Tap: down  | Long-tap: end   of doc.

// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)


/* Magic-shift & auto-layers */

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <200>;)


/* Custom behaviors */

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>;
          tap-ms = <5>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <200>;)

// Misc aliases. [TODO: clean up]
#define CANCEL        &kp K_CANCEL            // Cancel caps-word & auto-layers.
#define PAUSEBREAK    &kp PAUSE_BREAK


/* Keymap */

#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LN, RN, LT, RT, LM, RM, LB, RB, LH, RH)        \
      ZMK_LAYER(name, LN RN LT RT LM RM LB RB LH RH)
#endif

ZMK_BASE_LAYER(Base,
//            ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp N1        &kp N2        &kp N3        &kp N4        &kp N5      ,    &kp N6        &kp N7        &kp N8        &kp N9        &kp N0      ,
//            ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &kp Q         &kp W         &kp F         &kp P         &kp B       ,    &kp J         &kp L         &kp U         &kp Y         &kp SEMI    ,
//╭─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────╮
    &kp ESC     &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T  &kp G       ,    &kp M         &hmr LCTRL N  &hmr LSHFT E  &hmr LALT I   &hmr LGUI O     &kp RET ,
//╰─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰─────────╯
                &kp Z         &kp X         &kp C         &kp D         &kp V       ,    &kp K         &kp H         &kp COMMA     &kp DOT       &kp APOS    ,
//            ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                              MAGIC_SHIFT   &kp TAB       &lt FN BSPC   &mo MED     ,    &mo SYS       &kp RET       SMART_NUM     &lt_spc SYM 0
//                          ╰─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────╯
)


ZMK_BASE_LAYER(Media,
//            ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                                            _BT_SEL_KEYS_                           ,    &bt BT_CLR    ___           ___           ___           ___         ,
//            ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                            _UG_RGB_CLR_KEYS_                       ,    ___           ___           ___           ___           ___         ,
//╭─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────╮
    &kp PSCRN                               _UG_RGB_UP_KEYS_                        ,    &kp C_MUTE    &kp C_VOL_UP  &kp C_PP      ___           ___             ___     ,
//╰─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰─────────╯
                                            _UG_RGB_DN_KEYS_                        ,    ___           &kp C_VOL_DN  &kp C_PREV    &kp C_NEXT    ___         ,
//            ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                              ___           ___           ___           ___         ,    &tog GAM      ___           ___           ___
//                          ╰─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────╯
)


ZMK_BASE_LAYER(Num,
//            ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                ___           ___           ___           ___           ___         ,    ___           ___           ___           ___           ___         ,
//            ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                ___           &kp N7        &kp N8        &kp N9        ___         ,    &kp HOME      &kp BSPC      &kp DEL       &kp END       ___         ,
//╭─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────╮
    ___         &kp N0        &kp N4        &kp N5        &kp N6        ___         ,    NAV_LEFT      NAV_DOWN      NAV_UP        NAV_RIGHT     &kp INS         ___     ,
//╰─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰─────────╯
                ___           &kp N1        &kp N2        &kp N3        ___         ,    ___           &kp PG_DN     &kp PG_UP     ___           &kp DEL     ,
//            ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                              CANCEL        ___           ___           ___         ,    ___           ___           ___           ___
//                          ╰─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────╯
)

#define LSHFT_STAR  &hml LSHFT STAR
#define LCTRL_LPAR  &hml LCTRL LPAR
#define LSHFT_EQUAL &hml LSHFT EQUAL
#define LCTRL_MINUS &hml LCTRL MINUS

ZMK_BASE_LAYER(SYM,
//            ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                ___           ___           ___           ___           ___         ,    ___           ___           ___           ___           ___         ,
//            ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT   ,    ___           &kp SEMI      &kp LBKT      &kp RBKT      &kp BSLH    ,
//╭─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────╮
    ___         &kp CARET     &kp AMPS      LSHFT_STAR    LCTRL_LPAR    &kp RPAR    ,    ___           LCTRL_MINUS   LSHFT_EQUAL   ___           &kp APOS        ___     ,
//╰─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰─────────╯
                ___           ___           ___           &kp GRAVE     ___         ,    ___           ___           ___           ___           &kp SLASH   ,
//            ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                              MAGIC_SHIFT   ___           ___           ___         ,    ___           ___           ___           ___
//                          ╰─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────╯
)


ZMK_BASE_LAYER(Fn,
//            ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp F1        &kp F2        &kp F3        &kp F4        &kp F5      ,    &kp F6        &kp F7        &kp F8        &kp F9        &kp F10     ,
//            ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &kp F11       &kp F12       &kp F13       &kp F14       &kp F15     ,    &kp F16       &kp F17       &kp F18       &kp F19       &kp F20     ,
//╭─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────╮
   ___          ___           ___           ___           &kp SLCK      PAUSEBREAK  ,    ___           ___           ___           ___           ___             ___     ,
//╰─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰─────────╯
                ___           ___           ___           &kp CAPS      &kp SYSREQ  ,    ___           ___           ___           ___           ___         ,
//            ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                              ___           ___           ___           ___         ,    ___           ___           ___           ___
//                          ╰─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────╯
)


ZMK_BASE_LAYER(Sys,
//            ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                ___           ___           ___           ___           ___         ,    ___           ___           ___           ___           ___         ,
//            ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                ___           ___           ___           ___           ___         ,    ___           ___           ___           ___           ___         ,
//╭─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────╮
    &soft_off   ___           ___           ___           ___           &bootloader ,    &bootloader   ___           ___           ___           ___             ___     ,
//╰─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰─────────╯
                ___           ___           ___           ___           &sys_reset  ,    &sys_reset    ___           ___           ___           ___         ,
//            ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                              ___           ___           ___           ___         ,    ___           ___           ___           ___
//                          ╰─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────╯
)


ZMK_BASE_LAYER(Game,
//            ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp GRAVE     &kp N1        &kp N2        &kp N3        &kp N4      ,    &kp N5        &kp N6        &kp N7        &kp N8        &kp N9      ,
//            ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &kp TAB       &kp Q         &kp W         &kp E         &kp R       ,    &kp Y         &kp U         &kp I         &kp O         &kp P       ,
//╭─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────╮
    ___         &kp LSHFT     &kp A         &kp S         &kp D         &kp F       ,    &kp H         &kp J         &kp K         &kp J         &kp SEMI        ___     ,
//╰─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰─────────╯
                &kp LCTRL     &kp Z         &kp X         &kp C         &kp V       ,    &kp N         &kp M         &kp COMMA     &kp DOT       &kp SLASH   ,
//            ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                              &kp LALT      &kp SPACE     &lt GAMP RET  ___         ,    ___           ___           ___           ___
//                          ╰─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────╯
)


ZMK_BASE_LAYER(GamePlus,
//            ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp F1        &kp F2        &kp F3        &kp F4        &kp F5      ,    &kp F6        &kp F7        &kp F8        &kp F9        &kp F10     ,
//            ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &kp Q         &kp W         &kp E         &kp R         &kp T       ,    &kp Y         &kp U         &kp I         &kp O         &kp P       ,
//╭─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────╮
    ___         &kp A         &kp S         &kp D         &kp F         &kp G       ,    &kp H         &kp J         &kp K         &kp J         &kp SEMI        &kp RET ,
//╰─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰─────────╯
                &kp Z         &kp X         &kp C         &kp V         &kp B       ,    &kp N         &kp M         &kp COMMA     &kp DOT       &kp SLASH   ,
//            ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                              ___           ___           ___           ___         ,    ___           &kp LGUI      &kp LBKT      &kp RBKT
//                          ╰─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────╯
)

/* vim: set ft=c tw=146: */
